@page "/ordenes"

@using RegistroPedidos.Models
@using RegistroPedidos.BLL

@inject IToastService toast

<EditForm Model="Orden" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de pedidos</h3>
        </div>

        <div class="card-body">
            <form>
                @*PedidoId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Orden Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Orden.OrdenId" class="form-control col-4"></InputNumber>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"> <span class="oi oi-zoom-in"></span> Buscar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Orden.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(()=>Orden.Fecha)" />
                </div>

                @*Suplidor*@
                <div class="form-group">
                    <label>Suplidor</label>
                    <select class="form-control" @bind="Orden.SuplidorId">
                        <option value="0" disabled>Seleccione una opcion</option>
                        @foreach (var item in ListaSuplidores)
                        {
                            <option value="@item.SuplidorId">@item.Nombre</option>
                        }
                    </select>
                    <ValidationMessage For="@(()=>Orden.SuplidorId)" />
                </div>

                @*Detalle*@
                <div class="row">
                    <div class="form-group col">
                        <label>Producto</label>
                        <select class="form-control" @bind="productoId" @onfocusout="LlenarCosto">
                            <option value="0" disabled>Seleccione una opcion</option>
                            @foreach (var item in ListaProductos)
                            {
                                <option value="@item.ProductoId"> @item.Descripcion</option>
                            }
                        </select>
                    </div>

                    <div class="form-group col">
                        <label>Cantidad</label>
                        <InputNumber @bind-Value="cantidad" min="0" class="form-control" />
                    </div>

                    <div class="form-group col">
                        <label>Costo</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="costo" class="form-control" readOnly="true"/>
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="AgregarDetalle">
                                    <i class="oi oi-plus" aria-hidden="true" /> Agregar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                @*Tabla*@
                <table class="table">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Orden Id</th>
                            <th scope="col">Producto</th>
                            <th scope="col">Cantidad</th>
                            <th scope="col">Costo</th>
                            <th scope="col">Importe</th>
                            <th scope="col">Opcion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Orden.OrdenesDetalle)
                        {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.OrdenId</td>
                            <td>@ProductosBLL.Buscar(item.ProductoId).Descripcion</td>
                            <td>@item.Cantidad</td>
                            <td>@item.Costo</td>
                            <td>@(item.Cantidad * item.Costo)</td>
                            <td><button type="button" class="btn btn-danger" @onclick="(() => EliminarDetalle(item))">Remover</button></td>
                        </tr>
                        }
                    </tbody>
                </table>

                @*Monto*@
                <div class="card-footer">
                    <div class="form-group text-center">
                        <label>Monto</label>
                        <InputNumber @bind-Value="Orden.Monto" readOnly="true" />
                        <ValidationMessage For="(() => Orden.Monto)" />
                    </div>
                </div>

            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
            </div>

        </div>
    </div>
</EditForm>

@code {
    Ordenes Orden = new Ordenes();
    private List<Suplidores> ListaSuplidores = new List<Suplidores>();
    private List<Productos> ListaProductos = new List<Productos>();

    private int id;
    private int cantidad;
    private int ordenId;
    private int productoId;
    private decimal costo;

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        CargarSuplidores();
        CargarProductos();
    }

    public void LlenarCosto()
    {
        costo = ProductosBLL.Buscar(productoId).Costo;
    }

    public void CargarSuplidores()
    {
        ListaSuplidores = SuplidoresBLL.GetList(p => true);
    }

    public void CargarProductos()
    {
        ListaProductos = ProductosBLL.GetList(p => true);
    }

    private void Nuevo()
    {
        this.Orden = new Ordenes();

        id = 0;
        cantidad = 0;
        ordenId = 0;
        productoId = 0;
        costo = 0;
    }

    private void Buscar()
    {
        if (Orden.OrdenId > 0)
        {
            var encontrado = OrdenesBLL.Buscar(Orden.OrdenId);

            if (encontrado != null)
            {
                this.Orden = encontrado;
                CalcularMontoOrden();
            }
            else
            {
                toast.ShowWarning("¡No encontrado!");
            }
        }
    }

    private void Guardar()
    {
        bool guardo;
        if(Orden.OrdenesDetalle.Count <= 0)
        {
            toast.ShowError("¡Debe agregar al menos un producto al detalle!");
        }
        else
        {
            guardo = OrdenesBLL.Guardar(Orden);

            if (guardo)
            {
                Nuevo();
                toast.ShowSuccess("¡Guardado!");
            }
            else
                toast.ShowError("¡No Guardado!");
        }
    }

    private void Eliminar()
    {
        bool eliminar;

        eliminar = OrdenesBLL.Eliminar(Orden.OrdenId);

        if (eliminar)
        {
            Nuevo();
            toast.ShowSuccess("¡Eliminado!");
        }
        else
            toast.ShowError("¡No eliminado");
    }

    private void AgregarDetalle()
    {
        if(costo > 0)
        {
            if (cantidad > 0)
            {
                Orden.OrdenesDetalle.Add(new OrdenesDetalle
                {
                    Id = 0,
                    OrdenId = Orden.OrdenId,
                    ProductoId = productoId,
                    Cantidad = cantidad,
                    Costo = costo

                });
            }
            else
            {
                toast.ShowError("¡Debe introducir la cantidad!");
                return;
            }
        }
        else
        {
            toast.ShowError("¡Debe seleccionar un producto!");
        }

        id = 0;
        ordenId = Orden.OrdenId;
        productoId = 0;
        cantidad = 0;
        costo = 0;

        CalcularMontoOrden();

    }

    private void EliminarDetalle(OrdenesDetalle detalle)
    {
        Orden.OrdenesDetalle.Remove(detalle);
        CalcularMontoOrden();
    }

    private void CalcularMontoOrden()
    {
        decimal monto = 0;
        foreach (var item in Orden.OrdenesDetalle)
        {
            monto += (item.Cantidad * ProductosBLL.Buscar(item.ProductoId).Costo);
        }
        Orden.Monto = monto;
    }
}
